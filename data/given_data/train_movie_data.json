[
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找与登录用户名为\"Stewart\"的用户p有关的电影有哪些?返回子图",
        "output": "MATCH (p:user{id:\"399\",login:\"Stewart\"})-[e]-(neighbor:movie) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询所有通过has_keyword类型关系连接的节点对n和m,返回对应的n,关键字边,m",
        "output": "MATCH (n)-[e:has_keyword]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中符合(michael{id:\"1102\",name:\"Jack O'Connell\"})-[]->()模式的节点和关系,将匹配到的路径赋值给变量p,返回匹配的链路p",
        "output": "MATCH p=(michael{id:\"1102\",name:\"Jack O'Connell\"})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找流派n,返回n节点的name属性值,n节点的name属性值,同时按照节点的name属性升序排序",
        "output": "MATCH (n:genre) RETURN n.name,n.name ORDER BY n.name",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "获得流派id是\"610\"的电影有哪些?返回a节点,m节点",
        "output": "MATCH (m:genre{id:\"610\"})<-[:has_genre]-(a:movie) RETURN a,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找数据库中的关键字n,返回n节点的id属性值,n节点的name属性值,同时按照节点的id属性排序",
        "output": "MATCH (n:keyword) RETURN n.id,n.name ORDER BY keyword.id",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到与Laurence Fishburne有两步acted_in关系的共同演员，返回这些路径。",
        "output": "MATCH p = (laurence {name: 'Laurence Fishburne'})-[:acted_in*2]-(co_actor) RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询Michael讨厌的电影，返回电影的标题和评分。",
        "output": "MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie) WHERE r.stars < 3 RETURN m.title, r.stars",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "从数据库中查找名称为\"Chiwetel Ejiofor\",出生年份为\"1977\"的人u出版的电影有哪些?返回m节点的tagline属性值,边r",
        "output": "MATCH (u:person{name:\"Chiwetel Ejiofor\",born:\"1977\"})-[r:produce]->(m:movie) RETURN m.tagline,r",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "以可选的方式从数据库中查找与标题为\"The Avengers\"的电影p有关的人有哪些?返回对应的电影,e,人",
        "output": "OPTIONAL MATCH (p:movie{id:\"2055\",title:\"The Avengers\"})-[e]-(neighbor:person) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询图数据库中与Michael Douglas有直接出边关系的路径。",
        "output": "MATCH p = (michael {name: 'Michael Douglas'})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找与姓名为\"Talia Shire\"的人p有关的电影有哪些?返回子图",
        "output": "MATCH (p:person{id:\"482\",name:\"Talia Shire\"})-[e]-(neighbor:movie) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找所有通过has_keyword类型关系连接的节点对n和m,返回子图",
        "output": "MATCH (n)-[e:has_keyword]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中与id为\"2239\"的人p有关的电影有哪些?返回子图",
        "output": "MATCH (p:person{id:\"2239\"})-[e]-(neighbor:movie) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找给标签为\"Meet The Original Force Of Nature\"的电影m打分的用户有哪些?返回a节点,m节点",
        "output": "MATCH (m:movie{tagline:\"Meet The Original Force Of Nature\"})<-[:rate]-(a:user) RETURN a,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询所有参演Forrest Gump电影的演员。",
        "output": "MATCH (m:movie {title: 'Forrest Gump'})<-[:acted_in]-(a:person) RETURN a, m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "从数据库中查找与标签为\"It was the greatest art heist in history\"的电影p有关的关键字有哪些?返回子图",
        "output": "MATCH (p:movie{tagline:\"It was the greatest art heist in history\"})-[e]-(neighbor:keyword) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到电影The Matrix节点以及与其有直接关系的所有节点，并返回这些节点。",
        "output": "MATCH (matrix:movie {title: 'The Matrix'})-[*0..1]-(x) RETURN x",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中与出生日期为\"1943\"的人p有关的电影有哪些?返回相应的节点和关系",
        "output": "MATCH (p:person{id:\"483\",name:\"Gianni Russo\",born:\"1943\"})-[e]-(neighbor:movie) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找符合(node{id:\"579\"})-[]->()模式的节点和关系，将匹配到的路径赋值给变量p并返回。",
        "output": "MATCH p=(node{id:\"579\"})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询与用户u有相似低评分的电影偏好，但对其他电影有高评分的用户。返回相关的用户和电影。",
        "output": "MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v)-[r2:rate]->(m2:movie) WHERE r.stars < 3 AND s.stars < 3 AND r2.stars > 3 RETURN u, m, v, m2",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中的用户n,返回n节点的id属性值,n节点的id属性值,按照节点的id属性升序排列返回的结果",
        "output": "MATCH (n:user) RETURN n.id,n.id ORDER BY user.id",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "以可选的方式从数据库中查找所有通过rate类型关系连接的节点对n和m,返回对应的n,打分,m",
        "output": "OPTIONAL MATCH (n)-[e:rate]-(m) RETURN DISTINCT n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询图数据库中与Michael Douglas有直接出边关系的路径。",
        "output": "MATCH p = (michael {name: 'Michael Douglas'})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找符合(michael{id:\"21\"})-[]->()模式的节点和关系,将匹配到的路径赋值给变量p,返回匹配的链路p",
        "output": "MATCH p=(michael{id:\"21\"})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到与Michael Douglas有直接出边关系的所有路径，返回这些路径。",
        "output": "MATCH p = (michael {name: 'Michael Douglas'})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中所有通过write类型关系连接的节点对n和m,返回相应的节点和关系",
        "output": "MATCH (n)-[e:write]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中所有通过acted_in类型关系连接的节点对n和m,返回子图",
        "output": "MATCH (n)-[e:acted_in]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "以可选的方式查找数据库中的电影n,返回n节点的title属性值,n节点的id属性值,同时按照节点的title属性升序排序",
        "output": "OPTIONAL MATCH (n:movie) RETURN n.title,n.id ORDER BY movie.title",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到有关键字id为\"3388\"的关键字模板m的电影有哪些?返回a节点,m节点",
        "output": "MATCH (m:keyword{id:\"3388\"})<-[:has_keyword]-(a:movie) RETURN a,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图数据库中创建一个带有person标签的新节点，并为该节点设置id属性为2001，name属性值为Anders，完成创建后，返回该节点。",
        "output": "CREATE (n:person {id:2002, name: 'Andres'}) RETURN n",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找数据库中与名字为\"Paul Norell\"的人p有关的电影有哪些?返回对应的人,e,电影",
        "output": "MATCH (p:person{id:\"660\",name:\"Paul Norell\"})-[e]-(neighbor:movie) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "创建一个带有person标签的新节点，并为该节点设置id属性为2002和name属性为Anders。创建完成后，返回新节点的详细信息。",
        "output": "CREATE (n:person {id:2002, name: 'Andres'}) RETURN n",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "从数据库中查找与id为\"610\"的流派p有关的电影有哪些?返回相应的节点和关系",
        "output": "MATCH (p:genre{id:\"610\"})-[e]-(neighbor:movie) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询和用户Michael给同一部电影打分小于3星的用户，返回Michael、用户和电影的信息组成的子图。",
        "output": "MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v) WHERE r.stars < 3 AND s.stars < 3 RETURN u, m, v",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "从数据库中查找所有通过has_genre类型关系连接的节点对n和m,返回对应的n,流派e,m",
        "output": "MATCH (n)-[e:has_genre]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "Michael讨厌的电影有哪些？",
        "output": "MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie) WHERE r.stars < 3 RETURN m.title, r.stars",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询谁在电影Forrest Gump中扮演了什么角色，返回人的名字和扮演的角色。",
        "output": "MATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name,r.role",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找所有通过is_friend类型关系连接的节点对n和m,返回子图",
        "output": "MATCH (n)-[e:is_friend]-(m) RETURN DISTINCT n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到与Michael Douglas有直接出边关系的所有路径，返回这些路径。",
        "output": "MATCH p = (michael {name: 'Michael Douglas'})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到所有通过acted_in类型关系连接的节点对n和m,返回子图",
        "output": "MATCH (n)-[e:acted_in]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到所有通过write类型关系连接的节点对n和m,返回相应的节点和关系",
        "output": "MATCH (n)-[e:write]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "登录用户是Michaeld的朋友喜爱的电影有哪些？返回相关信息。",
        "output": "MATCH (u:user {login: 'Michael'})-[:is_friend]->(v:user)-[r:rate]->(m:movie) WHERE r.stars > 3 RETURN u, v, m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "创建一个标签为person的节点，其id属性为2001，name属性值为Anders。",
        "output": "CREATE (n:person {id:2001, name: 'Andres'})",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "获得出生年份为1977的Chiwetel Ejiofor出版的电影m有哪些?返回m节点的tagline属性值和连接关系。",
        "output": "MATCH (u:person{name:\"Chiwetel Ejiofor\",born:\"1977\"})-[r:produce]->(m:movie) RETURN m.tagline,r",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找名称为Carrie-Anne Moss的节点,返回该节点的born属性值，并将其重命名为SomethingTotallyDifferent。",
        "output": "MATCH (a {name: 'Carrie-Anne Moss'}) RETURN a.born AS SomethingTotallyDifferent",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到电影The Matrix节点以及与其有直接关系的所有节点，并返回这些节点。",
        "output": "MATCH (matrix:movie {title: 'The Matrix'})-[*0..1]-(x) RETURN x",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "获得与标签为\"The extraordinary true story of Solomon Northup\"的电影p有关的用户有哪些?返回相应的节点和关系,跳过前9条数据",
        "output": "MATCH (p:movie{id:\"1693\",title:\"12 Years a Slave\",tagline:\"The extraordinary true story of Solomon Northup\"})-[e]-(neighbor:user) RETURN p,e,neighbor SKIP 9",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中导演id为\"1\"的电影m的人有哪些?返回a节点,m节点",
        "output": "MATCH (m:movie{id:\"1\"})<-[:directed]-(a:person) RETURN a,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "获得所有通过produce类型关系连接的节点对n和m,返回对应的n,出版,m",
        "output": "MATCH (n)-[e:produce]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中名为\"Pat Morita\"的人u写的电影有哪些?返回m节点的tagline属性值和连接关系。",
        "output": "MATCH (u:person{name:\"Pat Morita\"})-[r:write]->(m:movie) RETURN m.tagline,r",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询与标题为\"The Monuments Men\"的电影p有关的人有哪些?返回子图",
        "output": "MATCH (p:movie{id:\"1356\",title:\"The Monuments Men\"})-[e]-(neighbor:person) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "以可选的方式找到登录用户名为\"Jacob\"的用户u打分的电影有哪些?返回m节点的tagline属性值,r边",
        "output": "OPTIONAL MATCH (u:user{login:\"Jacob\"})-[r:rate]->(m:movie) RETURN m.tagline,r",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "获得所有通过is_friend类型关系连接的节点对n和m,返回子图",
        "output": "MATCH (n)-[e:is_friend]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中带有person标签的节点的name属性值和带有movie标签的节点的title属性值，将这些结果合并在一起返回，并将合并后的列名统一为 name。",
        "output": "MATCH (n:person) RETURN n.name AS name UNION ALL MATCH (n:movie) RETURN n.title AS name",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "从数据库中查找与名字为\"motion capture\"的关键字p有关的电影有哪些?返回子图",
        "output": "MATCH (p:keyword{id:\"2587\",name:\"motion capture\"})-[e]-(neighbor:movie) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中与用户id为\"240\"的节点p有关的用户有哪些?返回相应的节点和关系",
        "output": "MATCH (p:user{id:\"240\"})-[e]-(neighbor:user) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "获得与id为\"39\"的用户p有关的用户有哪些?返回子图",
        "output": "MATCH (p:user{id:\"39\"})-[e]-(neighbor:user) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中名为\"David Wenham\"的人u导演的电影有哪些?返回m节点的tagline属性值和连接关系。",
        "output": "MATCH (u:person{name:\"David Wenham\"})-[r:directed]->(m:movie) RETURN m.tagline,r",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "以可选的方式查找数据库中与标签为\"Everything is Connected\"的电影p有关的流派有哪些?返回相应的节点和关系",
        "output": "OPTIONAL MATCH (p:movie{tagline:\"Everything is Connected\"})-[e]-(neighbor:genre) RETURN p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询出生日期为\"1965\"的人u参演的电影有哪些?返回m节点的tagline属性值,r边",
        "output": "MATCH (u:person{born:\"1965\"})-[r:acted_in]->(m:movie) RETURN m.tagline,r",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到出版标题为\"Beowulf\"的电影m的人有哪些?返回a节点,m节点,跳过前4条数据",
        "output": "MATCH (m:movie{title:\"Beowulf\"})<-[:produce]-(a:person) RETURN a,m SKIP 4",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "以可选的方式在图中查找符合(michael{id:\"1935\",title:\"The Croods\"})-[]->()模式的节点和关系,将匹配到的路径赋值给变量p,返回匹配的链路p",
        "output": "OPTIONAL MATCH p=(michael{id:\"1935\",title:\"The Croods\"})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找用户Michael评分低于3星的电影，返回电影的标题和评分。",
        "output": "MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie) WHERE r.stars < 3 RETURN m.title, r.stars",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找符合(michael{id:\"1105\",name:\"Hans Matheson\"})-[]->()模式的节点和关系,将匹配到的路径赋值给变量p,返回匹配的链路p",
        "output": "MATCH p=(michael{id:\"1105\",name:\"Hans Matheson\"})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到与姓名为Laurence Fishburne合作过的演员，并返回这些路径。",
        "output": "MATCH p = (laurence {name: 'Laurence Fishburne'})-[:acted_in*2]-(co_actor) RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "从数据库中查找所有通过produce类型关系连接的节点对n和m,返回相应的节点和关系",
        "output": "MATCH (n)-[e:produce]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找标签为\"The Legend Ends\"的电影u的关键字有哪些?返回m节点的id属性值,r边,跳过第一条数据",
        "output": "MATCH (u:movie{tagline:\"The Legend Ends\"})-[r:has_keyword]->(m:keyword) RETURN m.id,r SKIP 1",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询和用户Michael有共同讨厌的电影的人，返回Michael、用户和电影。",
        "output": "MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v) WHERE r.stars < 3 AND s.stars < 3 RETURN u, m, v",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "那些跟用户Michael有相同电影品味的人喜欢的电影有哪些？返回相关信息。",
        "output": "MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v)-[r2:rate]->(m2:movie) WHERE r.stars < 3 AND s.stars < 3 AND r2.stars > 3 RETURN u, m, v, m2",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询给电影Forrest Gump打高分的的用户给其他电影打分超过3星的电影，返回电影m,用户u和打分大于3星的电影m2。",
        "output": "MATCH (m:movie {title:'Forrest Gump'})<-[r:rate]-(u:user)-[r2:rate]->(m2:movie) WHERE r.stars>3 AND r2.stars>3 RETURN m, u,m2",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "从id为579的node节点到其他节点的所有直接相连的路径。",
        "output": "MATCH p=(node{id:\"579\"})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到电影The Matrix之间有零到一个关系的所有节点，包括电影节点自身和与之直接关联的节点。",
        "output": "MATCH (matrix:movie {title: 'The Matrix'})-[*0..1]-(x) RETURN x",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找数据库中与标题为\"Star Wars: Episode IV - A New Hope\"的电影p有关的人有哪些?返回子图",
        "output": "MATCH (p:movie{id:\"805\",title:\"Star Wars: Episode IV - A New Hope\"})-[e]-(neighbor:person) RETURN DISTINCT p,e,neighbor",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找人n,返回n节点的name属性值,n节点的id属性值,按照节点的id属性降序排列返回的结果",
        "output": "MATCH (n:person) RETURN DISTINCT n.name,n.id ORDER BY person.id DESC",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找符合(michael{id:\"2654\"})-[]->()模式的节点和关系,返回匹配的链路p",
        "output": "MATCH p=(michael{id:\"2654\"})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "找到所有通过directed类型关系连接的节点对n和m,返回子图",
        "output": "MATCH (n)-[e:directed]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "以可选的方式查找图数据库中是朋友关系用户id为\"662\"的节点m的用户有哪些?返回a节点,m节点",
        "output": "OPTIONAL MATCH (m:user{id:\"662\"})<-[:is_friend]-(a:user) RETURN a,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "寻找Michael评分低于3星的电影，以及同样给这些电影评分低于3星的其他用户,并查找这些用户评分高于3星的其他电影。",
        "output": "MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v)-[r2:rate]->(m2:movie) WHERE r.stars < 3 AND s.stars < 3 AND r2.stars > 3 RETURN u, m, v, m2",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "匹配一个id为\"2654\"的节点，然后查找该节点通过任何关系指向的节点,返回这个路径p。",
        "output": "MATCH p=(node{id:\"579\"})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "参演Forrest Gump电影的有哪些人?",
        "output": "MATCH (m:movie {title: 'Forrest Gump'})<-[:acted_in]-(a:person) RETURN a, m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中流派名称为\"Mystery\"的流派m的电影有哪些?返回a节点,m节点",
        "output": "MATCH (m:genre{name:\"Mystery\"})<-[:has_genre]-(a:movie) RETURN a,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中参演标题为\"Forrest Gump\"的电影m的人有哪些?返回a节点,m节点",
        "output": "MATCH (m:movie{title:\"Forrest Gump\"})<-[:acted_in]-(a:person) RETURN a,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找用户名为Michael的用户u，找到所有与u是朋友关系的用户v，并且这些用户v对某部电影m的评分r.stars大于3,返回用户u、用户v和电影m的相关信息。",
        "output": "MATCH (u:user {login: 'Michael'})-[:is_friend]->(v:user)-[r:rate]->(m:movie) WHERE r.stars > 3 RETURN u, v, m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找图数据库中写标题为\"12 Angry Men\"的电影m的作者都有谁?返回a节点,m节点",
        "output": "MATCH (m:movie{title:\"12 Angry Men\"})<-[:write]-(a:person) RETURN a,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询所有通过directed类型关系连接的节点对n和m,返回对应的n,导演,m,跳过第一条数据",
        "output": "MATCH (n)-[e:directed]-(m) RETURN n,e,m SKIP 1",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找数据库中符合(michael{id:\"579\"})-[]->()模式的节点和关系,将匹配到的路径赋值给变量p,返回匹配的链路p",
        "output": "MATCH p=(michael{id:\"579\"})-[]->() RETURN p",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询与标题为\"Gravity\"的电影p有关的人有哪些?返回子图,跳过前7条数据",
        "output": "MATCH (p:movie{id:\"1293\",title:\"Gravity\"})-[e]-(neighbor:person) RETURN p,e,neighbor SKIP 7",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "获得给id为\"3915\"的电影m的打分的用户有哪些?返回相应的电影和用户",
        "output": "MATCH (m:movie{id:\"3915\"})<-[:rate]-(a:user) RETURN a,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询id为517的电影u的流派有哪些?返回m节点的id属性值,r边",
        "output": "MATCH (u:movie{id:\"517\"})-[r:has_genre]->(m:genre) RETURN DISTINCT m.id,r",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找姓名为Laurence Fishburne和姓名为Carrie-Anne Moss的人，返回他们各自的出生日期和出生日期相差的绝对值。",
        "output": "MATCH (a:person {name: 'Laurence Fishburne'}),(e:person {name: 'Carrie-Anne Moss'}) RETURN a.born, e.born, abs(a.born-e.born)",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "获得所有通过has_genre类型关系连接的节点对n和m,返回对应的n,有流派,m",
        "output": "MATCH (n)-[e:has_genre]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "获得id为\"2432\",名字为\"Pat Morita\"的人u写的电影有哪些?返回m节点的tagline属性值,边r",
        "output": "MATCH (u:person{id:\"2432\",name:\"Pat Morita\"})-[r:write]->(m:movie) RETURN m.tagline,r",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找与id是\"187\"的用户是朋友关系的用户有哪些?返回m节点的id属性值,r边",
        "output": "MATCH (u:user{id:\"187\"})-[r:is_friend]->(m:user) RETURN m.id,r",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查找所有带有person标签的节点的name属性值。查找所有带有movie标签的节点的title属性值。将两个查询的结果合并在一起返回重命名为name，且不去除重复项。",
        "output": "MATCH (n:person) RETURN n.name AS name UNION ALL MATCH (n:movie) RETURN n.title AS name",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "Michael的朋友们评分大于3分的电影有哪些？返回相关信息。",
        "output": "MATCH (u:user {login: 'Michael'})-[:is_friend]->(v:user)-[r:rate]->(m:movie) WHERE r.stars > 3 RETURN u, v, m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "在图中查找用户名为’Michael’的用户u，找到u评分小于3的电影m。接着找到所有也对电影m评分小于3的用户v。然后，从这些用户v中找到对另一部电影m2评分大于3的情况。返回用户u、电影m、用户v和电影m2的相关信息。",
        "output": "MATCH (u:user {login: 'Michael'})-[r:rate]->(m:movie)<-[s:rate]-(v)-[r2:rate]->(m2:movie) WHERE r.stars < 3 AND s.stars < 3 AND r2.stars > 3 RETURN u, m, v, m2",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "查询所有通过rate类型关系连接的节点对n和m,返回相应的节点和关系",
        "output": "MATCH (n)-[e:rate]-(m) RETURN n,e,m",
        "history": []
    },
    {
        "db_id": "movie",
        "instruction": "",
        "input": "获得符合(michael{id:\"1245\",name:\"Alan Tudyk\"})-[]->()模式的节点和关系,返回匹配的链路p",
        "output": "MATCH p=(michael{id:\"1245\",name:\"Alan Tudyk\"})-[]->() RETURN p",
        "history": []
    }
]